plugins {
    alias(libs.plugins.androidLibrary)
    alias(libs.plugins.jetbrainsKotlinAndroid)
    id("kotlin-kapt")
    id("dagger.hilt.android.plugin")
    alias(libs.plugins.kotlinxSerialization)
}

// Properties 객체 생성
File localProperties = project.rootProject.file('local.properties')
Properties properties = new Properties()
if (localProperties.exists()) {
    properties.load(localProperties.newDataInputStream())
}

android {
    namespace 'com.jgeun.pokedex.core.networkimpl'
    compileSdk libs.versions.compileSdk.get().toInteger()


    defaultConfig {
        minSdk libs.versions.minSdk.get().toInteger()

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"

        buildConfigField "String", "BASE_URL", properties['base-url']
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
    }
    buildFeatures {
        buildConfig true
    }
}

dependencies {
    implementation(project(":core:model"))
    implementation(project(":core:network:api"))
    implementation(libs.bundles.network)
    implementation(libs.kotlinx.serialization)
    implementation(libs.hilt.android)
    kapt(libs.hilt.compiler)
    implementation 'com.google.code.gson:gson:2.8.5'
    testImplementation 'com.google.code.gson:gson:2.8.5'

    testImplementation(project(":core:model"))
    testImplementation(project(":core:test"))
    testImplementation(libs.bundles.test)
    testImplementation(libs.coroutines.test)
    testImplementation(libs.okhttp3.mockserver)
}